[/              
                Copyright Jeroen Habraken 2011.

   Distributed under the Boost Software License, Version 1.0.
   (See accompanying file ../../../LICENSE_1_0.txt or copy at
            http://www.boost.org/LICENSE_1_0.txt)
]

[section Interface]

As described in the synopsis Coerce has the functions `as` and `as_default`,
but many others were proposed on the Boost mailinglist whilst discussing
possible interface. Whilst I believe the two functions cover all cases it is
possible to extend Coerce with your own functions based on the interface
described in __advanced__backend__.

If no tag is specified default to `boost::coerce::tag::none`.

[heading Example]

    #include <boost/coerce.hpp>

    #include <iostream>
    #include <string>
    #include <utility>

    template <typename Target, typename Source, typename Tag>
    inline std::pair<Target, bool>
    as_pair(Source const & source, Tag const & tag) {
        Target target;

        bool result = boost::coerce::traits::as<
                Target, Source, Tag
            >::template call<Target, Source, Tag>(
                target, source, tag);

        return std::make_pair(target, result);
    }

    template <typename Target, typename Source>
    inline std::pair<Target, bool>
    as_pair(Source const & source) {
        return as_pair<Target, Source, boost::coerce::tag::none>(
            source, boost::coerce::tag::none());
    }

    int
    main() {
        std::pair<int, bool> result = as_pair<int>("23");

        if (result.second) {
            std::cout << result.first << std::endl;
        }
    }

[endsect]
